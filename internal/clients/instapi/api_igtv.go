/*
instagrapi-rest

RESTful API Service for instagrapi

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)


// IgtvApiService IgtvApi service
type IgtvApiService service

type ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest struct {
	ctx context.Context
	ApiService *IgtvApiService
	sessionid *string
	url *string
	filename *string
	folder *string
	returnFile *bool
}

func (r ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest) Sessionid(sessionid string) ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest) Url(url string) ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest {
	r.url = &url
	return r
}

func (r ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest) Filename(filename string) ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest {
	r.filename = &filename
	return r
}

func (r ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest) Folder(folder string) ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest {
	r.folder = &folder
	return r
}

func (r ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest) ReturnFile(returnFile bool) ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest {
	r.returnFile = &returnFile
	return r
}

func (r ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.IgtvDownloadByUrlIgtvDownloadByUrlPostExecute(r)
}

/*
IgtvDownloadByUrlIgtvDownloadByUrlPost Igtv Download By Url

Download IGTV video using URL
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest
*/
func (a *IgtvApiService) IgtvDownloadByUrlIgtvDownloadByUrlPost(ctx context.Context) ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest {
	return ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IgtvApiService) IgtvDownloadByUrlIgtvDownloadByUrlPostExecute(r ApiIgtvDownloadByUrlIgtvDownloadByUrlPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IgtvApiService.IgtvDownloadByUrlIgtvDownloadByUrlPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/igtv/download/by_url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("url", parameterToString(*r.url, ""))
	if r.filename != nil {
		localVarFormParams.Add("filename", parameterToString(*r.filename, ""))
	}
	if r.folder != nil {
		localVarFormParams.Add("folder", parameterToString(*r.folder, ""))
	}
	if r.returnFile != nil {
		localVarFormParams.Add("returnFile", parameterToString(*r.returnFile, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIgtvDownloadIgtvDownloadPostRequest struct {
	ctx context.Context
	ApiService *IgtvApiService
	sessionid *string
	mediaPk *int32
	folder *string
	returnFile *bool
}

func (r ApiIgtvDownloadIgtvDownloadPostRequest) Sessionid(sessionid string) ApiIgtvDownloadIgtvDownloadPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiIgtvDownloadIgtvDownloadPostRequest) MediaPk(mediaPk int32) ApiIgtvDownloadIgtvDownloadPostRequest {
	r.mediaPk = &mediaPk
	return r
}

func (r ApiIgtvDownloadIgtvDownloadPostRequest) Folder(folder string) ApiIgtvDownloadIgtvDownloadPostRequest {
	r.folder = &folder
	return r
}

func (r ApiIgtvDownloadIgtvDownloadPostRequest) ReturnFile(returnFile bool) ApiIgtvDownloadIgtvDownloadPostRequest {
	r.returnFile = &returnFile
	return r
}

func (r ApiIgtvDownloadIgtvDownloadPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.IgtvDownloadIgtvDownloadPostExecute(r)
}

/*
IgtvDownloadIgtvDownloadPost Igtv Download

Download IGTV video using media pk
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIgtvDownloadIgtvDownloadPostRequest
*/
func (a *IgtvApiService) IgtvDownloadIgtvDownloadPost(ctx context.Context) ApiIgtvDownloadIgtvDownloadPostRequest {
	return ApiIgtvDownloadIgtvDownloadPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IgtvApiService) IgtvDownloadIgtvDownloadPostExecute(r ApiIgtvDownloadIgtvDownloadPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IgtvApiService.IgtvDownloadIgtvDownloadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/igtv/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.mediaPk == nil {
		return localVarReturnValue, nil, reportError("mediaPk is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("media_pk", parameterToString(*r.mediaPk, ""))
	if r.folder != nil {
		localVarFormParams.Add("folder", parameterToString(*r.folder, ""))
	}
	if r.returnFile != nil {
		localVarFormParams.Add("returnFile", parameterToString(*r.returnFile, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIgtvUploadIgtvUploadPostRequest struct {
	ctx context.Context
	ApiService *IgtvApiService
	sessionid *string
	file **os.File
	title *string
	caption *string
	thumbnail **os.File
	usertags *[]Usertag
	location *Location
}

func (r ApiIgtvUploadIgtvUploadPostRequest) Sessionid(sessionid string) ApiIgtvUploadIgtvUploadPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiIgtvUploadIgtvUploadPostRequest) File(file *os.File) ApiIgtvUploadIgtvUploadPostRequest {
	r.file = &file
	return r
}

func (r ApiIgtvUploadIgtvUploadPostRequest) Title(title string) ApiIgtvUploadIgtvUploadPostRequest {
	r.title = &title
	return r
}

func (r ApiIgtvUploadIgtvUploadPostRequest) Caption(caption string) ApiIgtvUploadIgtvUploadPostRequest {
	r.caption = &caption
	return r
}

func (r ApiIgtvUploadIgtvUploadPostRequest) Thumbnail(thumbnail *os.File) ApiIgtvUploadIgtvUploadPostRequest {
	r.thumbnail = &thumbnail
	return r
}

func (r ApiIgtvUploadIgtvUploadPostRequest) Usertags(usertags []Usertag) ApiIgtvUploadIgtvUploadPostRequest {
	r.usertags = &usertags
	return r
}

func (r ApiIgtvUploadIgtvUploadPostRequest) Location(location Location) ApiIgtvUploadIgtvUploadPostRequest {
	r.location = &location
	return r
}

func (r ApiIgtvUploadIgtvUploadPostRequest) Execute() (*Media, *http.Response, error) {
	return r.ApiService.IgtvUploadIgtvUploadPostExecute(r)
}

/*
IgtvUploadIgtvUploadPost Igtv Upload

Upload photo and configure to feed
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIgtvUploadIgtvUploadPostRequest
*/
func (a *IgtvApiService) IgtvUploadIgtvUploadPost(ctx context.Context) ApiIgtvUploadIgtvUploadPostRequest {
	return ApiIgtvUploadIgtvUploadPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Media
func (a *IgtvApiService) IgtvUploadIgtvUploadPostExecute(r ApiIgtvUploadIgtvUploadPostRequest) (*Media, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Media
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IgtvApiService.IgtvUploadIgtvUploadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/igtv/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}
	if r.title == nil {
		return localVarReturnValue, nil, reportError("title is required and must be specified")
	}
	if r.caption == nil {
		return localVarReturnValue, nil, reportError("caption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"

	fileLocalVarFile := *r.file
	if fileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(fileLocalVarFile)
		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	localVarFormParams.Add("title", parameterToString(*r.title, ""))
	localVarFormParams.Add("caption", parameterToString(*r.caption, ""))
	var thumbnailLocalVarFormFileName string
	var thumbnailLocalVarFileName     string
	var thumbnailLocalVarFileBytes    []byte

	thumbnailLocalVarFormFileName = "thumbnail"

	var thumbnailLocalVarFile *os.File
	if r.thumbnail != nil {
		thumbnailLocalVarFile = *r.thumbnail
	}
	if thumbnailLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(thumbnailLocalVarFile)
		thumbnailLocalVarFileBytes = fbs
		thumbnailLocalVarFileName = thumbnailLocalVarFile.Name()
		thumbnailLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: thumbnailLocalVarFileBytes, fileName: thumbnailLocalVarFileName, formFileName: thumbnailLocalVarFormFileName})
	if r.usertags != nil {
		localVarFormParams.Add("usertags", parameterToString(*r.usertags, "csv"))
	}
	if r.location != nil {
		paramJson, err := parameterToJson(*r.location)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("location", paramJson)
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
