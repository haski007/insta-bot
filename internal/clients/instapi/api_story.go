/*
instagrapi-rest

RESTful API Service for instagrapi

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// StoryApiService StoryApi service
type StoryApiService service

type ApiStoryDeleteStoryDeletePostRequest struct {
	ctx        context.Context
	ApiService *StoryApiService
	sessionid  *string
	storyPk    *int32
}

func (r ApiStoryDeleteStoryDeletePostRequest) Sessionid(sessionid string) ApiStoryDeleteStoryDeletePostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiStoryDeleteStoryDeletePostRequest) StoryPk(storyPk int32) ApiStoryDeleteStoryDeletePostRequest {
	r.storyPk = &storyPk
	return r
}

func (r ApiStoryDeleteStoryDeletePostRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.StoryDeleteStoryDeletePostExecute(r)
}

/*
StoryDeleteStoryDeletePost Story Delete

# Delete story

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStoryDeleteStoryDeletePostRequest
*/
func (a *StoryApiService) StoryDeleteStoryDeletePost(ctx context.Context) ApiStoryDeleteStoryDeletePostRequest {
	return ApiStoryDeleteStoryDeletePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return bool
func (a *StoryApiService) StoryDeleteStoryDeletePostExecute(r ApiStoryDeleteStoryDeletePostRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StoryApiService.StoryDeleteStoryDeletePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/story/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.storyPk == nil {
		return localVarReturnValue, nil, reportError("storyPk is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("story_pk", parameterToString(*r.storyPk, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest struct {
	ctx        context.Context
	ApiService *StoryApiService
	sessionid  *string
	url        *string
	filename   *string
	folder     *string
	returnFile *bool
}

func (r ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest) Sessionid(sessionid string) ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest) Url(url string) ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest {
	r.url = &url
	return r
}

func (r ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest) Filename(filename string) ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest {
	r.filename = &filename
	return r
}

func (r ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest) Folder(folder string) ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest {
	r.folder = &folder
	return r
}

func (r ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest) ReturnFile(returnFile bool) ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest {
	r.returnFile = &returnFile
	return r
}

func (r ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.StoryDownloadByUrlStoryDownloadByUrlPostExecute(r)
}

/*
StoryDownloadByUrlStoryDownloadByUrlPost Story Download By Url

# Download story media using URL

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest
*/
func (a *StoryApiService) StoryDownloadByUrlStoryDownloadByUrlPost(ctx context.Context) ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest {
	return ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *StoryApiService) StoryDownloadByUrlStoryDownloadByUrlPostExecute(r ApiStoryDownloadByUrlStoryDownloadByUrlPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StoryApiService.StoryDownloadByUrlStoryDownloadByUrlPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/story/download/by_url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("url", parameterToString(*r.url, ""))
	if r.filename != nil {
		localVarFormParams.Add("filename", parameterToString(*r.filename, ""))
	}
	if r.folder != nil {
		localVarFormParams.Add("folder", parameterToString(*r.folder, ""))
	}
	if r.returnFile != nil {
		localVarFormParams.Add("returnFile", parameterToString(*r.returnFile, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStoryDownloadStoryDownloadPostRequest struct {
	ctx        context.Context
	ApiService *StoryApiService
	sessionid  *string
	storyPk    *int32
	filename   *string
	folder     *string
	returnFile *bool
}

func (r ApiStoryDownloadStoryDownloadPostRequest) Sessionid(sessionid string) ApiStoryDownloadStoryDownloadPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiStoryDownloadStoryDownloadPostRequest) StoryPk(storyPk int32) ApiStoryDownloadStoryDownloadPostRequest {
	r.storyPk = &storyPk
	return r
}

func (r ApiStoryDownloadStoryDownloadPostRequest) Filename(filename string) ApiStoryDownloadStoryDownloadPostRequest {
	r.filename = &filename
	return r
}

func (r ApiStoryDownloadStoryDownloadPostRequest) Folder(folder string) ApiStoryDownloadStoryDownloadPostRequest {
	r.folder = &folder
	return r
}

func (r ApiStoryDownloadStoryDownloadPostRequest) ReturnFile(returnFile bool) ApiStoryDownloadStoryDownloadPostRequest {
	r.returnFile = &returnFile
	return r
}

func (r ApiStoryDownloadStoryDownloadPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.StoryDownloadStoryDownloadPostExecute(r)
}

/*
StoryDownloadStoryDownloadPost Story Download

Download story media by media_type

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStoryDownloadStoryDownloadPostRequest
*/
func (a *StoryApiService) StoryDownloadStoryDownloadPost(ctx context.Context) ApiStoryDownloadStoryDownloadPostRequest {
	return ApiStoryDownloadStoryDownloadPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *StoryApiService) StoryDownloadStoryDownloadPostExecute(r ApiStoryDownloadStoryDownloadPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StoryApiService.StoryDownloadStoryDownloadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/story/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.storyPk == nil {
		return localVarReturnValue, nil, reportError("storyPk is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("story_pk", parameterToString(*r.storyPk, ""))
	if r.filename != nil {
		localVarFormParams.Add("filename", parameterToString(*r.filename, ""))
	}
	if r.folder != nil {
		localVarFormParams.Add("folder", parameterToString(*r.folder, ""))
	}
	if r.returnFile != nil {
		localVarFormParams.Add("returnFile", parameterToString(*r.returnFile, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStoryInfoStoryInfoPostRequest struct {
	ctx        context.Context
	ApiService *StoryApiService
	sessionid  *string
	storyPk    *string
	useCache   *bool
}

func (r ApiStoryInfoStoryInfoPostRequest) Sessionid(sessionid string) ApiStoryInfoStoryInfoPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiStoryInfoStoryInfoPostRequest) StoryPk(storyPk string) ApiStoryInfoStoryInfoPostRequest {
	r.storyPk = &storyPk
	return r
}

func (r ApiStoryInfoStoryInfoPostRequest) UseCache(useCache bool) ApiStoryInfoStoryInfoPostRequest {
	r.useCache = &useCache
	return r
}

func (r ApiStoryInfoStoryInfoPostRequest) Execute() (*Story, *http.Response, error) {
	return r.ApiService.StoryInfoStoryInfoPostExecute(r)
}

/*
StoryInfoStoryInfoPost Story Info

# Get Story by pk or id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStoryInfoStoryInfoPostRequest
*/
func (a *StoryApiService) StoryInfoStoryInfoPost(ctx context.Context) ApiStoryInfoStoryInfoPostRequest {
	return ApiStoryInfoStoryInfoPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Story
func (a *StoryApiService) StoryInfoStoryInfoPostExecute(r ApiStoryInfoStoryInfoPostRequest) (*Story, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Story
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StoryApiService.StoryInfoStoryInfoPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/story/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.storyPk == nil {
		return localVarReturnValue, nil, reportError("storyPk is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("story_pk", parameterToString(*r.storyPk, ""))
	if r.useCache != nil {
		localVarFormParams.Add("use_cache", parameterToString(*r.useCache, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStoryPkFromUrlStoryPkFromUrlGetRequest struct {
	ctx        context.Context
	ApiService *StoryApiService
	url        *string
}

func (r ApiStoryPkFromUrlStoryPkFromUrlGetRequest) Url(url string) ApiStoryPkFromUrlStoryPkFromUrlGetRequest {
	r.url = &url
	return r
}

func (r ApiStoryPkFromUrlStoryPkFromUrlGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.StoryPkFromUrlStoryPkFromUrlGetExecute(r)
}

/*
StoryPkFromUrlStoryPkFromUrlGet Story Pk From Url

# Get Story (media) PK from URL

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStoryPkFromUrlStoryPkFromUrlGetRequest
*/
func (a *StoryApiService) StoryPkFromUrlStoryPkFromUrlGet(ctx context.Context) ApiStoryPkFromUrlStoryPkFromUrlGetRequest {
	return ApiStoryPkFromUrlStoryPkFromUrlGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return interface{}
func (a *StoryApiService) StoryPkFromUrlStoryPkFromUrlGetExecute(r ApiStoryPkFromUrlStoryPkFromUrlGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StoryApiService.StoryPkFromUrlStoryPkFromUrlGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/story/pk_from_url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}

	localVarQueryParams.Add("url", parameterToString(*r.url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorySeenStorySeenPostRequest struct {
	ctx             context.Context
	ApiService      *StoryApiService
	sessionid       *string
	storyPks        *[]int32
	skippedStoryPks *[]int32
}

func (r ApiStorySeenStorySeenPostRequest) Sessionid(sessionid string) ApiStorySeenStorySeenPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiStorySeenStorySeenPostRequest) StoryPks(storyPks []int32) ApiStorySeenStorySeenPostRequest {
	r.storyPks = &storyPks
	return r
}

func (r ApiStorySeenStorySeenPostRequest) SkippedStoryPks(skippedStoryPks []int32) ApiStorySeenStorySeenPostRequest {
	r.skippedStoryPks = &skippedStoryPks
	return r
}

func (r ApiStorySeenStorySeenPostRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.StorySeenStorySeenPostExecute(r)
}

/*
StorySeenStorySeenPost Story Seen

# Mark a media as seen

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStorySeenStorySeenPostRequest
*/
func (a *StoryApiService) StorySeenStorySeenPost(ctx context.Context) ApiStorySeenStorySeenPostRequest {
	return ApiStorySeenStorySeenPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return bool
func (a *StoryApiService) StorySeenStorySeenPostExecute(r ApiStorySeenStorySeenPostRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StoryApiService.StorySeenStorySeenPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/story/seen"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.storyPks == nil {
		return localVarReturnValue, nil, reportError("storyPks is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("story_pks", parameterToString(*r.storyPks, "csv"))
	if r.skippedStoryPks != nil {
		localVarFormParams.Add("skipped_story_pks", parameterToString(*r.skippedStoryPks, "csv"))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStoryUserStoriesStoryUserStoriesPostRequest struct {
	ctx        context.Context
	ApiService *StoryApiService
	sessionid  *string
	userId     *string
	amount     *int32
}

func (r ApiStoryUserStoriesStoryUserStoriesPostRequest) Sessionid(sessionid string) ApiStoryUserStoriesStoryUserStoriesPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiStoryUserStoriesStoryUserStoriesPostRequest) UserId(userId string) ApiStoryUserStoriesStoryUserStoriesPostRequest {
	r.userId = &userId
	return r
}

func (r ApiStoryUserStoriesStoryUserStoriesPostRequest) Amount(amount int32) ApiStoryUserStoriesStoryUserStoriesPostRequest {
	r.amount = &amount
	return r
}

func (r ApiStoryUserStoriesStoryUserStoriesPostRequest) Execute() ([]Story, *http.Response, error) {
	return r.ApiService.StoryUserStoriesStoryUserStoriesPostExecute(r)
}

/*
StoryUserStoriesStoryUserStoriesPost Story User Stories

# Get a user's stories

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStoryUserStoriesStoryUserStoriesPostRequest
*/
func (a *StoryApiService) StoryUserStoriesStoryUserStoriesPost(ctx context.Context) ApiStoryUserStoriesStoryUserStoriesPostRequest {
	return ApiStoryUserStoriesStoryUserStoriesPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Story
func (a *StoryApiService) StoryUserStoriesStoryUserStoriesPostExecute(r ApiStoryUserStoriesStoryUserStoriesPostRequest) ([]Story, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Story
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StoryApiService.StoryUserStoriesStoryUserStoriesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/story/user_stories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	if r.amount != nil {
		localVarFormParams.Add("amount", parameterToString(*r.amount, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
