/*
instagrapi-rest

RESTful API Service for instagrapi

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)


// PhotoApiService PhotoApi service
type PhotoApiService service

type ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest struct {
	ctx context.Context
	ApiService *PhotoApiService
	sessionid *string
	url *string
	filename *string
	folder *string
	returnFile *bool
}

func (r ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest) Sessionid(sessionid string) ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest) Url(url string) ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest {
	r.url = &url
	return r
}

func (r ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest) Filename(filename string) ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest {
	r.filename = &filename
	return r
}

func (r ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest) Folder(folder string) ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest {
	r.folder = &folder
	return r
}

func (r ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest) ReturnFile(returnFile bool) ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest {
	r.returnFile = &returnFile
	return r
}

func (r ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.PhotoDownloadByUrlPhotoDownloadByUrlPostExecute(r)
}

/*
PhotoDownloadByUrlPhotoDownloadByUrlPost Photo Download By Url

Download photo using URL
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest
*/
func (a *PhotoApiService) PhotoDownloadByUrlPhotoDownloadByUrlPost(ctx context.Context) ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest {
	return ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PhotoApiService) PhotoDownloadByUrlPhotoDownloadByUrlPostExecute(r ApiPhotoDownloadByUrlPhotoDownloadByUrlPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhotoApiService.PhotoDownloadByUrlPhotoDownloadByUrlPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/photo/download/by_url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("url", parameterToString(*r.url, ""))
	if r.filename != nil {
		localVarFormParams.Add("filename", parameterToString(*r.filename, ""))
	}
	if r.folder != nil {
		localVarFormParams.Add("folder", parameterToString(*r.folder, ""))
	}
	if r.returnFile != nil {
		localVarFormParams.Add("returnFile", parameterToString(*r.returnFile, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPhotoDownloadPhotoDownloadPostRequest struct {
	ctx context.Context
	ApiService *PhotoApiService
	sessionid *string
	mediaPk *int32
	folder *string
	returnFile *bool
}

func (r ApiPhotoDownloadPhotoDownloadPostRequest) Sessionid(sessionid string) ApiPhotoDownloadPhotoDownloadPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiPhotoDownloadPhotoDownloadPostRequest) MediaPk(mediaPk int32) ApiPhotoDownloadPhotoDownloadPostRequest {
	r.mediaPk = &mediaPk
	return r
}

func (r ApiPhotoDownloadPhotoDownloadPostRequest) Folder(folder string) ApiPhotoDownloadPhotoDownloadPostRequest {
	r.folder = &folder
	return r
}

func (r ApiPhotoDownloadPhotoDownloadPostRequest) ReturnFile(returnFile bool) ApiPhotoDownloadPhotoDownloadPostRequest {
	r.returnFile = &returnFile
	return r
}

func (r ApiPhotoDownloadPhotoDownloadPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.PhotoDownloadPhotoDownloadPostExecute(r)
}

/*
PhotoDownloadPhotoDownloadPost Photo Download

Download photo using media pk
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPhotoDownloadPhotoDownloadPostRequest
*/
func (a *PhotoApiService) PhotoDownloadPhotoDownloadPost(ctx context.Context) ApiPhotoDownloadPhotoDownloadPostRequest {
	return ApiPhotoDownloadPhotoDownloadPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PhotoApiService) PhotoDownloadPhotoDownloadPostExecute(r ApiPhotoDownloadPhotoDownloadPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhotoApiService.PhotoDownloadPhotoDownloadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/photo/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.mediaPk == nil {
		return localVarReturnValue, nil, reportError("mediaPk is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("media_pk", parameterToString(*r.mediaPk, ""))
	if r.folder != nil {
		localVarFormParams.Add("folder", parameterToString(*r.folder, ""))
	}
	if r.returnFile != nil {
		localVarFormParams.Add("returnFile", parameterToString(*r.returnFile, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPhotoUploadPhotoUploadPostRequest struct {
	ctx context.Context
	ApiService *PhotoApiService
	sessionid *string
	file **os.File
	caption *string
	uploadId *string
	usertags *[]Usertag
	location *Location
}

func (r ApiPhotoUploadPhotoUploadPostRequest) Sessionid(sessionid string) ApiPhotoUploadPhotoUploadPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiPhotoUploadPhotoUploadPostRequest) File(file *os.File) ApiPhotoUploadPhotoUploadPostRequest {
	r.file = &file
	return r
}

func (r ApiPhotoUploadPhotoUploadPostRequest) Caption(caption string) ApiPhotoUploadPhotoUploadPostRequest {
	r.caption = &caption
	return r
}

func (r ApiPhotoUploadPhotoUploadPostRequest) UploadId(uploadId string) ApiPhotoUploadPhotoUploadPostRequest {
	r.uploadId = &uploadId
	return r
}

func (r ApiPhotoUploadPhotoUploadPostRequest) Usertags(usertags []Usertag) ApiPhotoUploadPhotoUploadPostRequest {
	r.usertags = &usertags
	return r
}

func (r ApiPhotoUploadPhotoUploadPostRequest) Location(location Location) ApiPhotoUploadPhotoUploadPostRequest {
	r.location = &location
	return r
}

func (r ApiPhotoUploadPhotoUploadPostRequest) Execute() (*Media, *http.Response, error) {
	return r.ApiService.PhotoUploadPhotoUploadPostExecute(r)
}

/*
PhotoUploadPhotoUploadPost Photo Upload

Upload photo and configure to feed
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPhotoUploadPhotoUploadPostRequest
*/
func (a *PhotoApiService) PhotoUploadPhotoUploadPost(ctx context.Context) ApiPhotoUploadPhotoUploadPostRequest {
	return ApiPhotoUploadPhotoUploadPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Media
func (a *PhotoApiService) PhotoUploadPhotoUploadPostExecute(r ApiPhotoUploadPhotoUploadPostRequest) (*Media, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Media
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhotoApiService.PhotoUploadPhotoUploadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/photo/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}
	if r.caption == nil {
		return localVarReturnValue, nil, reportError("caption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"

	fileLocalVarFile := *r.file
	if fileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(fileLocalVarFile)
		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	localVarFormParams.Add("caption", parameterToString(*r.caption, ""))
	if r.uploadId != nil {
		localVarFormParams.Add("upload_id", parameterToString(*r.uploadId, ""))
	}
	if r.usertags != nil {
		localVarFormParams.Add("usertags", parameterToString(*r.usertags, "csv"))
	}
	if r.location != nil {
		paramJson, err := parameterToJson(*r.location)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("location", paramJson)
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest struct {
	ctx context.Context
	ApiService *PhotoApiService
	sessionid *string
	url *string
	asVideo *bool
	caption *string
	mentions *[]StoryMention
	locations *[]StoryLocation
	links *[]StoryLink
	hashtags *[]StoryHashtag
	stickers *[]StorySticker
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Sessionid(sessionid string) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Url(url string) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.url = &url
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) AsVideo(asVideo bool) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.asVideo = &asVideo
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Caption(caption string) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.caption = &caption
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Mentions(mentions []StoryMention) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.mentions = &mentions
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Locations(locations []StoryLocation) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.locations = &locations
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Links(links []StoryLink) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.links = &links
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Hashtags(hashtags []StoryHashtag) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.hashtags = &hashtags
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Stickers(stickers []StorySticker) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	r.stickers = &stickers
	return r
}

func (r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) Execute() (*Story, *http.Response, error) {
	return r.ApiService.PhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostExecute(r)
}

/*
PhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPost Photo Upload To Story By Url

Upload photo to story by URL to file
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest
*/
func (a *PhotoApiService) PhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPost(ctx context.Context) ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest {
	return ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Story
func (a *PhotoApiService) PhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostExecute(r ApiPhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPostRequest) (*Story, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Story
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhotoApiService.PhotoUploadToStoryByUrlPhotoUploadToStoryByUrlPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/photo/upload_to_story/by_url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}
	if strlen(*r.url) < 1 {
		return localVarReturnValue, nil, reportError("url must have at least 1 elements")
	}
	if strlen(*r.url) > 2083 {
		return localVarReturnValue, nil, reportError("url must have less than 2083 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("url", parameterToString(*r.url, ""))
	if r.asVideo != nil {
		localVarFormParams.Add("as_video", parameterToString(*r.asVideo, ""))
	}
	if r.caption != nil {
		localVarFormParams.Add("caption", parameterToString(*r.caption, ""))
	}
	if r.mentions != nil {
		localVarFormParams.Add("mentions", parameterToString(*r.mentions, "csv"))
	}
	if r.locations != nil {
		localVarFormParams.Add("locations", parameterToString(*r.locations, "csv"))
	}
	if r.links != nil {
		localVarFormParams.Add("links", parameterToString(*r.links, "csv"))
	}
	if r.hashtags != nil {
		localVarFormParams.Add("hashtags", parameterToString(*r.hashtags, "csv"))
	}
	if r.stickers != nil {
		localVarFormParams.Add("stickers", parameterToString(*r.stickers, "csv"))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest struct {
	ctx context.Context
	ApiService *PhotoApiService
	sessionid *string
	file **os.File
	asVideo *bool
	caption *string
	mentions *[]StoryMention
	locations *[]StoryLocation
	links *[]StoryLink
	hashtags *[]StoryHashtag
	stickers *[]StorySticker
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) Sessionid(sessionid string) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) File(file *os.File) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.file = &file
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) AsVideo(asVideo bool) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.asVideo = &asVideo
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) Caption(caption string) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.caption = &caption
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) Mentions(mentions []StoryMention) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.mentions = &mentions
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) Locations(locations []StoryLocation) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.locations = &locations
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) Links(links []StoryLink) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.links = &links
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) Hashtags(hashtags []StoryHashtag) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.hashtags = &hashtags
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) Stickers(stickers []StorySticker) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	r.stickers = &stickers
	return r
}

func (r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) Execute() (*Story, *http.Response, error) {
	return r.ApiService.PhotoUploadToStoryPhotoUploadToStoryPostExecute(r)
}

/*
PhotoUploadToStoryPhotoUploadToStoryPost Photo Upload To Story

Upload photo to story
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest
*/
func (a *PhotoApiService) PhotoUploadToStoryPhotoUploadToStoryPost(ctx context.Context) ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest {
	return ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Story
func (a *PhotoApiService) PhotoUploadToStoryPhotoUploadToStoryPostExecute(r ApiPhotoUploadToStoryPhotoUploadToStoryPostRequest) (*Story, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Story
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhotoApiService.PhotoUploadToStoryPhotoUploadToStoryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/photo/upload_to_story"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"

	fileLocalVarFile := *r.file
	if fileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(fileLocalVarFile)
		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	if r.asVideo != nil {
		localVarFormParams.Add("as_video", parameterToString(*r.asVideo, ""))
	}
	if r.caption != nil {
		localVarFormParams.Add("caption", parameterToString(*r.caption, ""))
	}
	if r.mentions != nil {
		localVarFormParams.Add("mentions", parameterToString(*r.mentions, "csv"))
	}
	if r.locations != nil {
		localVarFormParams.Add("locations", parameterToString(*r.locations, "csv"))
	}
	if r.links != nil {
		localVarFormParams.Add("links", parameterToString(*r.links, "csv"))
	}
	if r.hashtags != nil {
		localVarFormParams.Add("hashtags", parameterToString(*r.hashtags, "csv"))
	}
	if r.stickers != nil {
		localVarFormParams.Add("stickers", parameterToString(*r.stickers, "csv"))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
