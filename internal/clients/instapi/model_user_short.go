/*
instagrapi-rest

RESTful API Service for instagrapi

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instapi

import (
	"encoding/json"
)

// UserShort struct for UserShort
type UserShort struct {
	Pk string `json:"pk"`
	Username *string `json:"username,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	ProfilePicUrl *string `json:"profile_pic_url,omitempty"`
	ProfilePicUrlHd *string `json:"profile_pic_url_hd,omitempty"`
	IsPrivate *bool `json:"is_private,omitempty"`
	Stories []interface{} `json:"stories,omitempty"`
}

// NewUserShort instantiates a new UserShort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserShort(pk string) *UserShort {
	this := UserShort{}
	this.Pk = pk
	var fullName string = ""
	this.FullName = &fullName
	return &this
}

// NewUserShortWithDefaults instantiates a new UserShort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserShortWithDefaults() *UserShort {
	this := UserShort{}
	var fullName string = ""
	this.FullName = &fullName
	return &this
}

// GetPk returns the Pk field value
func (o *UserShort) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *UserShort) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *UserShort) SetPk(v string) {
	o.Pk = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserShort) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserShort) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserShort) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserShort) SetUsername(v string) {
	o.Username = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *UserShort) GetFullName() string {
	if o == nil || o.FullName == nil {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserShort) GetFullNameOk() (*string, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *UserShort) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *UserShort) SetFullName(v string) {
	o.FullName = &v
}

// GetProfilePicUrl returns the ProfilePicUrl field value if set, zero value otherwise.
func (o *UserShort) GetProfilePicUrl() string {
	if o == nil || o.ProfilePicUrl == nil {
		var ret string
		return ret
	}
	return *o.ProfilePicUrl
}

// GetProfilePicUrlOk returns a tuple with the ProfilePicUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserShort) GetProfilePicUrlOk() (*string, bool) {
	if o == nil || o.ProfilePicUrl == nil {
		return nil, false
	}
	return o.ProfilePicUrl, true
}

// HasProfilePicUrl returns a boolean if a field has been set.
func (o *UserShort) HasProfilePicUrl() bool {
	if o != nil && o.ProfilePicUrl != nil {
		return true
	}

	return false
}

// SetProfilePicUrl gets a reference to the given string and assigns it to the ProfilePicUrl field.
func (o *UserShort) SetProfilePicUrl(v string) {
	o.ProfilePicUrl = &v
}

// GetProfilePicUrlHd returns the ProfilePicUrlHd field value if set, zero value otherwise.
func (o *UserShort) GetProfilePicUrlHd() string {
	if o == nil || o.ProfilePicUrlHd == nil {
		var ret string
		return ret
	}
	return *o.ProfilePicUrlHd
}

// GetProfilePicUrlHdOk returns a tuple with the ProfilePicUrlHd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserShort) GetProfilePicUrlHdOk() (*string, bool) {
	if o == nil || o.ProfilePicUrlHd == nil {
		return nil, false
	}
	return o.ProfilePicUrlHd, true
}

// HasProfilePicUrlHd returns a boolean if a field has been set.
func (o *UserShort) HasProfilePicUrlHd() bool {
	if o != nil && o.ProfilePicUrlHd != nil {
		return true
	}

	return false
}

// SetProfilePicUrlHd gets a reference to the given string and assigns it to the ProfilePicUrlHd field.
func (o *UserShort) SetProfilePicUrlHd(v string) {
	o.ProfilePicUrlHd = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *UserShort) GetIsPrivate() bool {
	if o == nil || o.IsPrivate == nil {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserShort) GetIsPrivateOk() (*bool, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *UserShort) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *UserShort) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetStories returns the Stories field value if set, zero value otherwise.
func (o *UserShort) GetStories() []interface{} {
	if o == nil || o.Stories == nil {
		var ret []interface{}
		return ret
	}
	return o.Stories
}

// GetStoriesOk returns a tuple with the Stories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserShort) GetStoriesOk() ([]interface{}, bool) {
	if o == nil || o.Stories == nil {
		return nil, false
	}
	return o.Stories, true
}

// HasStories returns a boolean if a field has been set.
func (o *UserShort) HasStories() bool {
	if o != nil && o.Stories != nil {
		return true
	}

	return false
}

// SetStories gets a reference to the given []interface{} and assigns it to the Stories field.
func (o *UserShort) SetStories(v []interface{}) {
	o.Stories = v
}

func (o UserShort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.ProfilePicUrl != nil {
		toSerialize["profile_pic_url"] = o.ProfilePicUrl
	}
	if o.ProfilePicUrlHd != nil {
		toSerialize["profile_pic_url_hd"] = o.ProfilePicUrlHd
	}
	if o.IsPrivate != nil {
		toSerialize["is_private"] = o.IsPrivate
	}
	if o.Stories != nil {
		toSerialize["stories"] = o.Stories
	}
	return json.Marshal(toSerialize)
}

type NullableUserShort struct {
	value *UserShort
	isSet bool
}

func (v NullableUserShort) Get() *UserShort {
	return v.value
}

func (v *NullableUserShort) Set(val *UserShort) {
	v.value = val
	v.isSet = true
}

func (v NullableUserShort) IsSet() bool {
	return v.isSet
}

func (v *NullableUserShort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserShort(val *UserShort) *NullableUserShort {
	return &NullableUserShort{value: val, isSet: true}
}

func (v NullableUserShort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserShort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


