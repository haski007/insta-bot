/*
instagrapi-rest

RESTful API Service for instagrapi

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instapi

import (
	"encoding/json"
)

// Resource struct for Resource
type Resource struct {
	Pk string `json:"pk"`
	VideoUrl *string `json:"video_url,omitempty"`
	ThumbnailUrl string `json:"thumbnail_url"`
	MediaType int32 `json:"media_type"`
}

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource(pk string, thumbnailUrl string, mediaType int32) *Resource {
	this := Resource{}
	this.Pk = pk
	this.ThumbnailUrl = thumbnailUrl
	this.MediaType = mediaType
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetPk returns the Pk field value
func (o *Resource) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *Resource) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *Resource) SetPk(v string) {
	o.Pk = v
}

// GetVideoUrl returns the VideoUrl field value if set, zero value otherwise.
func (o *Resource) GetVideoUrl() string {
	if o == nil || o.VideoUrl == nil {
		var ret string
		return ret
	}
	return *o.VideoUrl
}

// GetVideoUrlOk returns a tuple with the VideoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetVideoUrlOk() (*string, bool) {
	if o == nil || o.VideoUrl == nil {
		return nil, false
	}
	return o.VideoUrl, true
}

// HasVideoUrl returns a boolean if a field has been set.
func (o *Resource) HasVideoUrl() bool {
	if o != nil && o.VideoUrl != nil {
		return true
	}

	return false
}

// SetVideoUrl gets a reference to the given string and assigns it to the VideoUrl field.
func (o *Resource) SetVideoUrl(v string) {
	o.VideoUrl = &v
}

// GetThumbnailUrl returns the ThumbnailUrl field value
func (o *Resource) GetThumbnailUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThumbnailUrl
}

// GetThumbnailUrlOk returns a tuple with the ThumbnailUrl field value
// and a boolean to check if the value has been set.
func (o *Resource) GetThumbnailUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThumbnailUrl, true
}

// SetThumbnailUrl sets field value
func (o *Resource) SetThumbnailUrl(v string) {
	o.ThumbnailUrl = v
}

// GetMediaType returns the MediaType field value
func (o *Resource) GetMediaType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MediaType
}

// GetMediaTypeOk returns a tuple with the MediaType field value
// and a boolean to check if the value has been set.
func (o *Resource) GetMediaTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaType, true
}

// SetMediaType sets field value
func (o *Resource) SetMediaType(v int32) {
	o.MediaType = v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if o.VideoUrl != nil {
		toSerialize["video_url"] = o.VideoUrl
	}
	if true {
		toSerialize["thumbnail_url"] = o.ThumbnailUrl
	}
	if true {
		toSerialize["media_type"] = o.MediaType
	}
	return json.Marshal(toSerialize)
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


