/*
instagrapi-rest

RESTful API Service for instagrapi

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)


// AlbumApiService AlbumApi service
type AlbumApiService service

type ApiAlbumDownloadAlbumDownloadPostRequest struct {
	ctx context.Context
	ApiService *AlbumApiService
	sessionid *string
	mediaPk *int32
	folder *string
}

func (r ApiAlbumDownloadAlbumDownloadPostRequest) Sessionid(sessionid string) ApiAlbumDownloadAlbumDownloadPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiAlbumDownloadAlbumDownloadPostRequest) MediaPk(mediaPk int32) ApiAlbumDownloadAlbumDownloadPostRequest {
	r.mediaPk = &mediaPk
	return r
}

func (r ApiAlbumDownloadAlbumDownloadPostRequest) Folder(folder string) ApiAlbumDownloadAlbumDownloadPostRequest {
	r.folder = &folder
	return r
}

func (r ApiAlbumDownloadAlbumDownloadPostRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.AlbumDownloadAlbumDownloadPostExecute(r)
}

/*
AlbumDownloadAlbumDownloadPost Album Download

Download photo using media pk
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlbumDownloadAlbumDownloadPostRequest
*/
func (a *AlbumApiService) AlbumDownloadAlbumDownloadPost(ctx context.Context) ApiAlbumDownloadAlbumDownloadPostRequest {
	return ApiAlbumDownloadAlbumDownloadPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []string
func (a *AlbumApiService) AlbumDownloadAlbumDownloadPostExecute(r ApiAlbumDownloadAlbumDownloadPostRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlbumApiService.AlbumDownloadAlbumDownloadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/album/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.mediaPk == nil {
		return localVarReturnValue, nil, reportError("mediaPk is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("media_pk", parameterToString(*r.mediaPk, ""))
	if r.folder != nil {
		localVarFormParams.Add("folder", parameterToString(*r.folder, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest struct {
	ctx context.Context
	ApiService *AlbumApiService
	sessionid *string
	urls *[]string
	folder *string
}

func (r ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest) Sessionid(sessionid string) ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest) Urls(urls []string) ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest {
	r.urls = &urls
	return r
}

func (r ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest) Folder(folder string) ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest {
	r.folder = &folder
	return r
}

func (r ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.AlbumDownloadByUrlsAlbumDownloadByUrlsPostExecute(r)
}

/*
AlbumDownloadByUrlsAlbumDownloadByUrlsPost Album Download By Urls

Download photo using URL
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest
*/
func (a *AlbumApiService) AlbumDownloadByUrlsAlbumDownloadByUrlsPost(ctx context.Context) ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest {
	return ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []string
func (a *AlbumApiService) AlbumDownloadByUrlsAlbumDownloadByUrlsPostExecute(r ApiAlbumDownloadByUrlsAlbumDownloadByUrlsPostRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlbumApiService.AlbumDownloadByUrlsAlbumDownloadByUrlsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/album/download/by_urls"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.urls == nil {
		return localVarReturnValue, nil, reportError("urls is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("urls", parameterToString(*r.urls, "csv"))
	if r.folder != nil {
		localVarFormParams.Add("folder", parameterToString(*r.folder, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlbumUploadAlbumUploadPostRequest struct {
	ctx context.Context
	ApiService *AlbumApiService
	sessionid *string
	files *[]*os.File
	caption *string
	usertags *[]Usertag
	location *Location
}

func (r ApiAlbumUploadAlbumUploadPostRequest) Sessionid(sessionid string) ApiAlbumUploadAlbumUploadPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiAlbumUploadAlbumUploadPostRequest) Files(files []*os.File) ApiAlbumUploadAlbumUploadPostRequest {
	r.files = &files
	return r
}

func (r ApiAlbumUploadAlbumUploadPostRequest) Caption(caption string) ApiAlbumUploadAlbumUploadPostRequest {
	r.caption = &caption
	return r
}

func (r ApiAlbumUploadAlbumUploadPostRequest) Usertags(usertags []Usertag) ApiAlbumUploadAlbumUploadPostRequest {
	r.usertags = &usertags
	return r
}

func (r ApiAlbumUploadAlbumUploadPostRequest) Location(location Location) ApiAlbumUploadAlbumUploadPostRequest {
	r.location = &location
	return r
}

func (r ApiAlbumUploadAlbumUploadPostRequest) Execute() (*Media, *http.Response, error) {
	return r.ApiService.AlbumUploadAlbumUploadPostExecute(r)
}

/*
AlbumUploadAlbumUploadPost Album Upload

Upload album to feed
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlbumUploadAlbumUploadPostRequest
*/
func (a *AlbumApiService) AlbumUploadAlbumUploadPost(ctx context.Context) ApiAlbumUploadAlbumUploadPostRequest {
	return ApiAlbumUploadAlbumUploadPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Media
func (a *AlbumApiService) AlbumUploadAlbumUploadPostExecute(r ApiAlbumUploadAlbumUploadPostRequest) (*Media, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Media
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlbumApiService.AlbumUploadAlbumUploadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/album/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.files == nil {
		return localVarReturnValue, nil, reportError("files is required and must be specified")
	}
	if r.caption == nil {
		return localVarReturnValue, nil, reportError("caption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	var filesLocalVarFormFileName string
	var filesLocalVarFileName     string
	var filesLocalVarFileBytes    []byte

	filesLocalVarFormFileName = "files"

	//filesLocalVarFile := *r.files
	//if filesLocalVarFile != nil {
	//	fbs, _ := io.ReadAll(filesLocalVarFile)
	//	filesLocalVarFileBytes = fbs
	//	filesLocalVarFileName = filesLocalVarFile.Name()
	//	filesLocalVarFile.Close()
	//}
	formFiles = append(formFiles, formFile{fileBytes: filesLocalVarFileBytes, fileName: filesLocalVarFileName, formFileName: filesLocalVarFormFileName})
	localVarFormParams.Add("caption", parameterToString(*r.caption, ""))
	if r.usertags != nil {
		localVarFormParams.Add("usertags", parameterToString(*r.usertags, "csv"))
	}
	if r.location != nil {
		paramJson, err := parameterToJson(*r.location)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("location", paramJson)
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
