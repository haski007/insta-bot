/*
instagrapi-rest

RESTful API Service for instagrapi

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instapi

import (
	"encoding/json"
)

// StorySticker struct for StorySticker
type StorySticker struct {
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	X float32 `json:"x"`
	Y float32 `json:"y"`
	Z *int32 `json:"z,omitempty"`
	Width float32 `json:"width"`
	Height float32 `json:"height"`
	Rotation *float32 `json:"rotation,omitempty"`
	Extra map[string]interface{} `json:"extra"`
}

// NewStorySticker instantiates a new StorySticker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorySticker(x float32, y float32, width float32, height float32, extra map[string]interface{}) *StorySticker {
	this := StorySticker{}
	var type_ string = "gif"
	this.Type = &type_
	this.X = x
	this.Y = y
	var z int32 = 1000005
	this.Z = &z
	this.Width = width
	this.Height = height
	var rotation float32 = 0.0
	this.Rotation = &rotation
	this.Extra = extra
	return &this
}

// NewStoryStickerWithDefaults instantiates a new StorySticker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoryStickerWithDefaults() *StorySticker {
	this := StorySticker{}
	var type_ string = "gif"
	this.Type = &type_
	var z int32 = 1000005
	this.Z = &z
	var rotation float32 = 0.0
	this.Rotation = &rotation
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorySticker) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorySticker) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorySticker) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StorySticker) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorySticker) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorySticker) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorySticker) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StorySticker) SetType(v string) {
	o.Type = &v
}

// GetX returns the X field value
func (o *StorySticker) GetX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *StorySticker) GetXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *StorySticker) SetX(v float32) {
	o.X = v
}

// GetY returns the Y field value
func (o *StorySticker) GetY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *StorySticker) GetYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *StorySticker) SetY(v float32) {
	o.Y = v
}

// GetZ returns the Z field value if set, zero value otherwise.
func (o *StorySticker) GetZ() int32 {
	if o == nil || o.Z == nil {
		var ret int32
		return ret
	}
	return *o.Z
}

// GetZOk returns a tuple with the Z field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorySticker) GetZOk() (*int32, bool) {
	if o == nil || o.Z == nil {
		return nil, false
	}
	return o.Z, true
}

// HasZ returns a boolean if a field has been set.
func (o *StorySticker) HasZ() bool {
	if o != nil && o.Z != nil {
		return true
	}

	return false
}

// SetZ gets a reference to the given int32 and assigns it to the Z field.
func (o *StorySticker) SetZ(v int32) {
	o.Z = &v
}

// GetWidth returns the Width field value
func (o *StorySticker) GetWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *StorySticker) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *StorySticker) SetWidth(v float32) {
	o.Width = v
}

// GetHeight returns the Height field value
func (o *StorySticker) GetHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *StorySticker) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *StorySticker) SetHeight(v float32) {
	o.Height = v
}

// GetRotation returns the Rotation field value if set, zero value otherwise.
func (o *StorySticker) GetRotation() float32 {
	if o == nil || o.Rotation == nil {
		var ret float32
		return ret
	}
	return *o.Rotation
}

// GetRotationOk returns a tuple with the Rotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorySticker) GetRotationOk() (*float32, bool) {
	if o == nil || o.Rotation == nil {
		return nil, false
	}
	return o.Rotation, true
}

// HasRotation returns a boolean if a field has been set.
func (o *StorySticker) HasRotation() bool {
	if o != nil && o.Rotation != nil {
		return true
	}

	return false
}

// SetRotation gets a reference to the given float32 and assigns it to the Rotation field.
func (o *StorySticker) SetRotation(v float32) {
	o.Rotation = &v
}

// GetExtra returns the Extra field value
func (o *StorySticker) GetExtra() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value
// and a boolean to check if the value has been set.
func (o *StorySticker) GetExtraOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extra, true
}

// SetExtra sets field value
func (o *StorySticker) SetExtra(v map[string]interface{}) {
	o.Extra = v
}

func (o StorySticker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["x"] = o.X
	}
	if true {
		toSerialize["y"] = o.Y
	}
	if o.Z != nil {
		toSerialize["z"] = o.Z
	}
	if true {
		toSerialize["width"] = o.Width
	}
	if true {
		toSerialize["height"] = o.Height
	}
	if o.Rotation != nil {
		toSerialize["rotation"] = o.Rotation
	}
	if true {
		toSerialize["extra"] = o.Extra
	}
	return json.Marshal(toSerialize)
}

type NullableStorySticker struct {
	value *StorySticker
	isSet bool
}

func (v NullableStorySticker) Get() *StorySticker {
	return v.value
}

func (v *NullableStorySticker) Set(val *StorySticker) {
	v.value = val
	v.isSet = true
}

func (v NullableStorySticker) IsSet() bool {
	return v.isSet
}

func (v *NullableStorySticker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorySticker(val *StorySticker) *NullableStorySticker {
	return &NullableStorySticker{value: val, isSet: true}
}

func (v NullableStorySticker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorySticker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


