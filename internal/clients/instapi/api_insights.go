/*
instagrapi-rest

RESTful API Service for instagrapi

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// InsightsApiService InsightsApi service
type InsightsApiService service

type ApiAccountInsightsAccountPostRequest struct {
	ctx context.Context
	ApiService *InsightsApiService
	sessionid *string
}

func (r ApiAccountInsightsAccountPostRequest) Sessionid(sessionid string) ApiAccountInsightsAccountPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiAccountInsightsAccountPostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AccountInsightsAccountPostExecute(r)
}

/*
AccountInsightsAccountPost Account

Get insights for account
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountInsightsAccountPostRequest
*/
func (a *InsightsApiService) AccountInsightsAccountPost(ctx context.Context) ApiAccountInsightsAccountPostRequest {
	return ApiAccountInsightsAccountPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *InsightsApiService) AccountInsightsAccountPostExecute(r ApiAccountInsightsAccountPostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsApiService.AccountInsightsAccountPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/insights/account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMediaFeedAllInsightsMediaFeedAllPostRequest struct {
	ctx context.Context
	ApiService *InsightsApiService
	sessionid *string
	postType *string
	timeFrame *string
	dataOrdering *string
	count *int32
}

func (r ApiMediaFeedAllInsightsMediaFeedAllPostRequest) Sessionid(sessionid string) ApiMediaFeedAllInsightsMediaFeedAllPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiMediaFeedAllInsightsMediaFeedAllPostRequest) PostType(postType string) ApiMediaFeedAllInsightsMediaFeedAllPostRequest {
	r.postType = &postType
	return r
}

func (r ApiMediaFeedAllInsightsMediaFeedAllPostRequest) TimeFrame(timeFrame string) ApiMediaFeedAllInsightsMediaFeedAllPostRequest {
	r.timeFrame = &timeFrame
	return r
}

func (r ApiMediaFeedAllInsightsMediaFeedAllPostRequest) DataOrdering(dataOrdering string) ApiMediaFeedAllInsightsMediaFeedAllPostRequest {
	r.dataOrdering = &dataOrdering
	return r
}

func (r ApiMediaFeedAllInsightsMediaFeedAllPostRequest) Count(count int32) ApiMediaFeedAllInsightsMediaFeedAllPostRequest {
	r.count = &count
	return r
}

func (r ApiMediaFeedAllInsightsMediaFeedAllPostRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.MediaFeedAllInsightsMediaFeedAllPostExecute(r)
}

/*
MediaFeedAllInsightsMediaFeedAllPost Media Feed All

Return medias with insights
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMediaFeedAllInsightsMediaFeedAllPostRequest
*/
func (a *InsightsApiService) MediaFeedAllInsightsMediaFeedAllPost(ctx context.Context) ApiMediaFeedAllInsightsMediaFeedAllPostRequest {
	return ApiMediaFeedAllInsightsMediaFeedAllPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *InsightsApiService) MediaFeedAllInsightsMediaFeedAllPostExecute(r ApiMediaFeedAllInsightsMediaFeedAllPostRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsApiService.MediaFeedAllInsightsMediaFeedAllPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/insights/media_feed_all"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}

	if r.postType != nil {
		localVarQueryParams.Add("post_type", parameterToString(*r.postType, ""))
	}
	if r.timeFrame != nil {
		localVarQueryParams.Add("time_frame", parameterToString(*r.timeFrame, ""))
	}
	if r.dataOrdering != nil {
		localVarQueryParams.Add("data_ordering", parameterToString(*r.dataOrdering, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMediaInsightsMediaPostRequest struct {
	ctx context.Context
	ApiService *InsightsApiService
	sessionid *string
	mediaPk *int32
}

func (r ApiMediaInsightsMediaPostRequest) Sessionid(sessionid string) ApiMediaInsightsMediaPostRequest {
	r.sessionid = &sessionid
	return r
}

func (r ApiMediaInsightsMediaPostRequest) MediaPk(mediaPk int32) ApiMediaInsightsMediaPostRequest {
	r.mediaPk = &mediaPk
	return r
}

func (r ApiMediaInsightsMediaPostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.MediaInsightsMediaPostExecute(r)
}

/*
MediaInsightsMediaPost Media

Get insights data for media
    

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMediaInsightsMediaPostRequest
*/
func (a *InsightsApiService) MediaInsightsMediaPost(ctx context.Context) ApiMediaInsightsMediaPostRequest {
	return ApiMediaInsightsMediaPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *InsightsApiService) MediaInsightsMediaPostExecute(r ApiMediaInsightsMediaPostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsApiService.MediaInsightsMediaPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/insights/media"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sessionid == nil {
		return localVarReturnValue, nil, reportError("sessionid is required and must be specified")
	}
	if r.mediaPk == nil {
		return localVarReturnValue, nil, reportError("mediaPk is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("sessionid", parameterToString(*r.sessionid, ""))
	localVarFormParams.Add("media_pk", parameterToString(*r.mediaPk, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
